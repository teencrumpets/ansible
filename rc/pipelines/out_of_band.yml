trigger: none

pool:
  name: 's6_scheduled_24.04'

parameters:
  - name: ENV
    displayName: "Select Environment:"
    type: string
    default: prod
    values:
      - prod
      - prep

variables:
  - group: Ansible
  - group: YPG_Environment

  - name: vault
    ${{ if eq(parameters.ENV, 'prod') }}:
      value: "vault_key"
    ${{ if eq(parameters.ENV, 'prep') }}:
      value: "vault_key_prep"

  - name: inventory
    ${{ if eq(parameters.ENV, 'prod') }}:
      value: "inventory.yml"
    ${{ if eq(parameters.ENV, 'prep') }}:
      value: "Pre-Production-inventory.yml"

  - name: hostname
    ${{ if eq(parameters.ENV, 'prod') }}:
      value: $(docker_host)
    ${{ if eq(parameters.ENV, 'prep') }}:
      value: $(docker_host_prep)

steps:
- script: pipx upgrade --include-injected ansible
  displayName: 'Upgrade pipx'

- script: rm -f ~/.ssh/known_hosts
  displayName: 'Purging known hosts'

- script: rm -f ~/.ssh/known_hosts
  displayName: 'Purging known hosts'

- task: DownloadSecureFile@1
  name: ssh_key
  displayName: 'Download SSH Key'
  inputs:
    secureFile: 'ypgansible_ssh'

- task: DownloadSecureFile@1
  name: vault_key
  displayName: 'Download SSH Key'
  inputs:
    secureFile: $(vault)

- script: chmod 600 $(ssh_key.secureFilePath)
  displayName: 'Setting SSH Key permisisons'

- script: >
    ansible-playbook site.yml 
    -i "$(inventory_path)/$(inventory)" 
    -e 
    "HOSTS=$(hostname)
    disruptive_mode=true
    role=docker_host
    ENV=${{parameters.ENV}}" 
    --vault-password-file=$(vault_key.secureFilePath) 
    --key-file '$(ssh_key.secureFilePath)'
  displayName: 'Running Docker as disruptive'

- script: >
    ansible-playbook site.yml 
    -i $(inventory_path)/$(inventory) 
    -e"
    HOSTS=$(hostname)
    role=nginx
    ENV=${{parameters.ENV}}
    nginx_mode=bounce
    run_docker=''" 
    --vault-password-file=$(vault_key.secureFilePath) 
    --key-file '$(ssh_key.secureFilePath)'
  displayName: 'Restarting Nginx'

- script: >
    ansible-playbook site.yml 
    -i $(inventory_path)/$(inventory) 
    -e"
    HOSTS=$(hostname)
    role=keycloak
    ENV=${{parameters.ENV}}
    keycloak_mode=bounce
    run_docker=''" 
    --vault-password-file=$(vault_key.secureFilePath) 
    --key-file '$(ssh_key.secureFilePath)'
  displayName: 'Restarting Keycloak'

- script: >
    ansible-playbook site.yml 
    -i $(inventory_path)/$(inventory) 
    -e"
    HOSTS=$(hostname)
    role=datahub
    ENV=${{parameters.ENV}}
    datahub_mode=bounce
    run_docker=''" 
    --vault-password-file=$(vault_key.secureFilePath) 
    --key-file '$(ssh_key.secureFilePath)'
  displayName: 'Restarting Datahub'