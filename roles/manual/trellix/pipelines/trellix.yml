trigger: none

pool:
  name: 'nec_ondemand_L'

parameters:
  - name: HOSTS
    displayName: "Name of Server:"
    type: string

  - name: ENV
    displayName: "Select Environment:"
    type: string
    default: null
    values:
      - prod
      - prep
      - dev

  - name: mode
    displayName: "Mode:"
    type: string
    default: install
    values:
      - install
      - scan

variables:
  - group: Ansible

  - name: vault
    ${{ if eq(parameters.ENV, 'prod') }}:
      value: "vault_key"
    ${{ if eq(parameters.ENV, 'prep') }}:
      value: "vault_key_prep"
    ${{ if eq(parameters.ENV, 'dev') }}:
      value: "vault_key_dev"

  - name: inventory
    ${{ if eq(parameters.ENV, 'prod') }}:
      value: "inventory.yml"
    ${{ if eq(parameters.ENV, 'prep') }}:
      value: "Pre-Production-inventory.yml"
    ${{ if eq(parameters.ENV, 'dev') }}:
      value: "Lab-inventory.yml"

steps:
- script: python3 -m pip install --upgrade pip
  displayName: 'Upgrade pip'

- script: python3 -m pip install --upgrade ansible
  displayName: 'Install ansible'

- task: DownloadSecureFile@1
  name: ssh_key
  displayName: 'Download SSH Key'
  inputs:
    secureFile: 'ypgansible_ssh'

- task: DownloadSecureFile@1
  name: vault_key
  displayName: 'Download SSH Key'
  inputs:
    secureFile: $(vault)

- script: chmod 600 $(ssh_key.secureFilePath)
  displayName: 'Setting SSH Key permisisons'

- script: >
    ansible-playbook site.yml 
    -i $(inventory_path)/$(inventory) 
    -e 
    "HOSTS=${{parameters.HOSTS}} 
    role=trellix 
    mode=${{parameters.mode}} 
    ENV=${{parameters.ENV}}" 
    --vault-password-file=$(vault_key.secureFilePath) 
    --key-file '$(ssh_key.secureFilePath)'
  displayName: 'Running Trellix Install'